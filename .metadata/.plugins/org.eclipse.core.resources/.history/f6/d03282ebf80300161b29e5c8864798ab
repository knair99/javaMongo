package com.nimma.jersey.iot;

import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.security.NoSuchAlgorithmException;

import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import com.nimma.jersey.server.EllipticServer;
import com.nimma.jersey.server.eccdatum.ECCDatum;
import com.nimma.jersey.server.iotdatum.IOTDatum;

public class RegisterIOT {

	public static void main(String[] args){
		
		EllipticServer e = new EllipticServer();
		
		//Generate public key
		e.generate_public_key();
		
		//Display all information generated so far
		e.display_data();
		
		//Generate hash of message to sign
		BigInteger hash = null;
		String message = "";
		
		try {
			message = "The quick brown fox jumped over the lazy dog";
			hash = e.get_hash_from_message(message);
		} catch (NoSuchAlgorithmException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (UnsupportedEncodingException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		System.out.println("Hash: \n" + hash);
		
		//Digitally sign the message using ECC
		BigInteger[] signature = e.sign_message(hash);
		System.out.println("Signature: \n" + signature[0] + ",\n" + signature[1] );
		
		//Verify the signature at our end to make sure
		if(e.verify_signature(signature, hash)){
			System.out.println("Signature verification tested: PASSED!");
		}
		else{
			System.out.println("Signature verification tested: FAILED!");
		}
		
		SecurityResponse(hash, message, signature);
		
		//RegisterIOTWithServer(2, 2, "5129094874");
		//CheckForUpdates(1,2);
		
	}
	
	public static void SecurityResponse (BigInteger hash, String message, BigInteger[] signature){
		
		ECCDatum ed = new ECCDatum();
		ed.sethash(hash);
		ed.setmessage(message);
		ed.setsignature(signature[1]);
		
		
		String json_iot = ed.toString();
		
		//Push this to server
		//Setup client
		Client client = ClientBuilder.newClient();
		WebTarget target = client.target("http://localhost:8080/com.nimma.jersey.server/rest");
		
		//Handle response
		System.out.println("JSON from client : " + json_iot );
		Response r2 = target.path("/security").request(MediaType.APPLICATION_JSON_TYPE).post(
				Entity.entity(json_iot, MediaType.APPLICATION_JSON_TYPE));

		//Output
		System.out.println("Server response:");
		System.out.println(r2.readEntity(String.class));
		System.out.println("---------------------------");
		
	}
	
	
	public static void RegisterIOTWithServer(int id, int device_id, String phone){
		IOTDatum idata = new IOTDatum();
		
		idata.setdeviceid(device_id);
		idata.setid(id);
		idata.setphonenumber(phone);
		
		String json_iot = idata.toString();
		
		//Push this to server
		//Setup client
		Client client = ClientBuilder.newClient();
		WebTarget target = client.target("http://localhost:8080/com.nimma.jersey.server/rest");
		
		//Handle response
		System.out.println("JSON from client : " + json_iot );
		Response r2 = target.path("/register").request(MediaType.APPLICATION_JSON_TYPE).post(
				Entity.entity(json_iot, MediaType.APPLICATION_JSON_TYPE));

		//Output
		System.out.println("Server response:");
		System.out.println(r2.readEntity(String.class));
		System.out.println("---------------------------");
		
	}
	
	public static void CheckForUpdates(int dept_id, int device_id){
		IOTDatum idata = new IOTDatum();
		
		idata.setdeviceid(device_id);
		idata.setid(dept_id);
		idata.setphonenumber("911");
		String json_iot = idata.toString();
		
		Client client = ClientBuilder.newClient();
		WebTarget target = client.target("http://localhost:8080/com.nimma.jersey.server/rest");
		
		//Handle response
		System.out.println("JSON from client : " + json_iot );
		Response r2 = target.path("/update").path("/iot").request(MediaType.APPLICATION_JSON_TYPE).post(
				Entity.entity(json_iot, MediaType.APPLICATION_JSON_TYPE));

		//Output
		System.out.println("Server updates:");
		System.out.println(r2.readEntity(String.class));
		System.out.println("---------------------------");
		
		
	}
	
	
}
